import configparser,telebot,json
import os
from qiwipyapi import Wallet
from telebot import types, util
from threading import Thread
from time import sleep
from util import generate_random_password, renamer

keyboardcheck = types.ReplyKeyboardMarkup(resize_keyboard=True)
keyboardcheck.add(types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"))
keyboardcheck.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂"))

removekeyboard = types.ReplyKeyboardRemove()

config = configparser.ConfigParser()
config.read("config.ini")

TOKEN = config["telegram"]["token"]
OWNER_ID = config["telegram"]["owner"]
wallet_number = config["qiwi"]["wallet_number"]
QIWI_SEC_TOKEN = config["qiwi"]["QIWI_SEC_TOKEN"]
PRICE = config["price"]["price"]
print(f'===\nConfig is:\nOwner ID: {OWNER_ID}\nBot Token: {TOKEN}\nwallet_number: {wallet_number}\nQIWI_SEC_TOKEN: {QIWI_SEC_TOKEN}\n===')

wallet_p2p = Wallet(wallet_number, p2p_sec_key=QIWI_SEC_TOKEN)
bot = telebot.TeleBot(TOKEN)

def save_to_settings(name, password):
    try:
        open('/etc/ppp/chap-secrets','a').write(f'\n{name} pptpd {password} *')
        os.system('sudo service pptpd restart')
    except Exception as e:
        print(str(e))

def create_account_vpn(name, id):
    log = load_log(id)
    password = generate_random_password(10)
    log['buyed'].append({'ip':'18.117.182.83','username':renamer(name),'pass':password})
    save_log(log,id)
    save_to_settings(renamer(name), password)
    return 

def check_billing(message, name: str):
    print('Getted name: '+name)
    for x in range(240):
        log = load_log(message.from_user.id)
        if log['billid'] != '':
            status = wallet_p2p.invoice_status(bill_id=log['billid'])
            if status['status']['value'] == 'PAID':
                create_account_vpn(name, message.from_user.id)
                bot.send_message(message.chat.id,'–ú—ã —É–≤–∏–¥–∏–ª–∏ –≤–∞—à –ø–ª–∞—Ç–µ–∂, –¥–∞–Ω–Ω—ã–µ –æ—Ç VPN –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ /myvpns')
                return
            else:
                sleep(60)
        else:
            return
    return



def load_log(log):
    with open(f'logs/{str(log)}.json','r',encoding='utf-8') as f:
        data = json.load(f)
        return data
def save_log(exchanges: dict, id):
    temp = load_log(id)
    temp.update(exchanges)
    with open(f'logs/{id}.json','w',encoding='utf-8') as file:
        json.dump(temp, file, ensure_ascii=False,indent=4)
        return True
    pass

def HaveLog(id):
    try:
        open('logs/'+str(id)+'.json','r',encoding='utf-8').read()
        return True
    except Exception as e:
        return False

def save_example_log(id):
    with open(f'logs/{id}.json','w',encoding='utf-8') as file:
        json.dump({
            'buyed':[],
            'lastname':'',
            'billid': '',
            'buyprocces': False
        }, file, ensure_ascii=False,indent=4)
    return True

@bot.message_handler(commands=["start"])
def connectss(message):
    if not HaveLog(message.from_user.id):
        save_example_log(message.from_user.id)
    bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}!üëã\n–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ VPN —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Ç @skiste.\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ - /buy\n–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ - /help\n–î–ª—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö VPN –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - /myvpns\n\n–î–ê–ù–ù–´–ô VPN –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –î–õ–Ø –ê–ô–§–û–ù–û–í, –Ø –†–ê–ë–û–¢–ê–Æ –ù–ê–î –≠–¢–ò–ú')

@bot.message_handler(commands=["help"])
def connectss(message):
    bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–π –±–æ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ VPN —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Ç –∞–º–∞–∑–æ–Ω–∞. –°–µ—Ä–≤–µ—Ä —Å—Ç–æ–∏—Ç –≤ –°–®–ê. –ò–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏, –¥–æ 6–º–±–∏—Ç\—Å –Ω–∞ –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥\n\n–¶–µ–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ–≥–æ **100 —Ä—É–±–ª–µ–π**\n\n–í —Å–ª—É—á–∞–µ –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ VPN (—á—Ç–æ –≤ —Ç–µ–æ—Ä–∏–∏ –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –º–∞–ª–æ –ª–∏) –ø–∏—Å–∞—Ç—å @skiste\n\n–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞:\nWindows - https://clck.ru/sY83o (–ø—Ä–æ—Ç–æ–∫–æ–ª PPTP)', parse_mode="Markdown")

@bot.message_handler(commands=["myvpns"])
def connectss(message):
    temp = load_log(message.from_user.id)
    if temp['buyed'] == []:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ –∫—É–ø–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ - /buy !')
    else:
        text = ''
        for x in temp['buyed']:
            text = text + '`' +x['ip'] + '` - IP\n`' + x['username'] + '` - Username\n`' + x['pass'] +'` - Password\n---\n'
        bot.send_message(message.chat.id, text[:-5], parse_mode='Markdown')

@bot.message_handler(commands=["stoop"])
def connectss(message):
    if str(message.from_user.id) == OWNER_ID:
        os.exit()
@bot.message_handler(commands=["buy"])
def connectss(message):
    save_log({'buyprocces':False},message.from_user.id)
    log = load_log(message.from_user.id)
    if not log['buyprocces']:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–º—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è VPN (–±–µ–∑ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):')
        save_log({'buyprocces':True},message.from_user.id)
        

@bot.message_handler(content_types='text')
def connectss(message):
    log = load_log(message.from_user.id)
    if log['buyprocces']:
        invoice = wallet_p2p.create_invoice(value=int(PRICE))
        print(invoice["payUrl"])
        bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ–µ –∏–º—è!\n–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –∑–∞–ø–ª–∞—Ç–∏—Ç—å:\n{invoice["payUrl"]}',reply_markup=keyboardcheck)
        save_log({'lastname':message.text,'buyprocces':False,'billid':invoice['billId']},message.from_user.id)
        Thread(target=check_billing,args=(message,message.text,)).start()
    elif message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É":
        status = wallet_p2p.invoice_status(bill_id=log['billid'])
        print(status)
        if status['status']['value'] == 'WAITING':
            bot.send_message(message.chat.id, '–ü–ª–∞—Ç–µ–∂ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—Å–µ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª')
            return
        elif status['status']['value'] == 'PAID':
            bot.send_message(message.chat.id, '–í–∏–¥–∏–º –≤–∞—à –ø–ª–∞—Ç–µ–∂, —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞')
    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂':
        wallet_p2p.cancel_invoice(bill_id=log['billid'])
        bot.send_message(message.chat.id, '–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω ;c', reply_markup=removekeyboard)
        save_log({'billid':'','lastname':''},message.from_user.id)
        return


while True:
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        print(str(e))
